// 解构赋值

// 1-数组的解构赋值
// 数组解构在赋值运算符=左侧通过[]批量声明变量,按照变量声明的顺序分别接收不同索引的数组元素值
// 可以在[]中定义默认值,仅当变量值===undefined时生效(还可以引用声明位置靠前的其他变量作为默认值)
//  ①变量数量大于数组长度时,多余变量赋值为undefined
//  ②变量数量小于数组长度时,可以在[]末尾使用扩展运算符...获取剩余元素
let arr = [1, 2, 3]
let [a, b, c] = arr
// 批量声明变量 a b c
// 同时将数组单元值 1 2 3 依次赋值给变量 a b c


// 2-对象的解构赋值
// 对象解构在赋值运算符=左侧通过{}批量声明变量
// 对象解构匹配的不是声明顺序,要求解构的变量名和对象中的属性名完全相同,无法匹配属性时设为undefined
// 可以在{}中定义默认值,仅当变量值===undefined时生效
const user = {
    name: '小明',
    age: 18
};
let {name, age, sign = 23} = user
// 批量声明变量 name age
// 同时将数组单元值 小明  18 依次赋值给变量 name  age


// 3-函数参数的解构赋值
// 函数参数解构本质上是数组和对象的解构操作
// 数组和对象类型的实参传入函数中时,会被自动解构为形参变量名标识的变量,在函数内部使用解构变量访问
function add([x, y]){
    return x + y;
}
add([1, 2]);  // 3

// 函数参数的解构也可以使用默认值:
// ①赋值运算符=左侧对应实参不为空的情况,
//   数组或对象实参缺少某个参数时赋值为undefined,定义默认值后使用形参上的默认值填充
// ②赋值运算符=右侧对应实参为空的情况,
//   定义数组或对象整体,调用函数没有传入实参时赋值为undefined,定义默认值后使用默认值作为实参
function move({x = 0, y = 0} = {x : 1, y : 2}) {
    return [x, y];
}
move({x: 3, y: 8});  // [3, 8]
move({x: 3});        // [3, 0]
move({});            // [1, 2]
move();                          // [1, 2]
